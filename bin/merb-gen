#!/usr/bin/env ruby

at_exit { exit }

command = ARGV.shift if %w( generate destroy update ).include?(ARGV[0])

%w(rubygems merb-core).each do |file|
  require file
end

# start merb
Merb.start :environment => 'development', :adapter => 'runner', :log_level => 'error'

# remove dependency
module Kernel
  undef dependency if defined?(Kernel.dependency)
end

%w(rubigen rubigen/scripts/generate rubigen/scripts/destroy 
    rubigen/scripts/update fileutils find merb-gen).each do |file|
  require file
end

if ARGV.empty?
  # List all the Available Generators
  RubiGen::Base.use_component_sources! Merb.generator_scope
  RubiGen::Scripts::Generate.new.run(ARGV)

# merb-gen plugin foo
elsif ARGV[0] && ARGV[0] == "plugin"
  Merb::ApplicationGenerator.run ARGV[1], ARGV[2..-1], "merb_plugin", command || "generate"

# merb-gen frozen-merb
elsif ARGV[0] && ARGV[0] == "frozen-merb"
  Merb::ComponentGenerator.run "frozen-merb", ["frozen-merb"], "freezer", command || "generate"

# merb-gen controller foo
# merb-gen resource foo --test
elsif ARGV[1] && ARGV[1] !~ /^-/
  Merb::ComponentGenerator.run ARGV[1], ARGV[1..-1], ARGV.first, command || "generate"

# merb-gen foo --flat
elsif ARGV[1] && ARGV[1] == "--flat"
  Merb::ApplicationGenerator.run ARGV.first, ARGV[2..-1], "merb_flat", command || "generate"

# merb-gen foo --very-flat
elsif ARGV[1] && ARGV[1] == "--very-flat"
  Merb::ApplicationGenerator.run ARGV.first, ARGV[2..-1], "merb_very_flat", command || "generate"


# catch all merb-gen -??? and display help instead of creating application in -???
elsif ARGV[0] && ARGV[0] =~ /^-/
  puts <<-EOF
  Application Generators:
  To generate an application use one of the following
  merb-gen app_name             (for a standard application)
  merb-gen app_name --flat      (for a flattened application)
  merb-gen app_name --very-flat (for a single file application)
  merb-gen frozen-merb          (script to run from frozen gems/framework)
  merb-gen plugin plugin_name   (creates a plugin gem skeleton)
  
  Other Generators:
  merb-gen
  with no args will display all availble generators for the current configuration.
  EOF



else
  begin
    # May be a generator that takes no arguments.
    RubiGen::Base.use_component_sources! Merb.generator_scope
    RubiGen::Base.lookup(ARGV[0])
    Merb::ComponentGenerator.run ARGV[0], ARGV[1..-1], ARGV.first, command || "generate"
  rescue RubiGen::GeneratorError    
    # merb-gen foo
    # merb-gen foo --test
    Merb::ApplicationGenerator.run ARGV[0], ARGV[1..-1], "merb", command || "generate"
  rescue => e
    puts e.message
  end  
end
