#!/usr/bin/env ruby

at_exit { exit }

command = ARGV.shift if %w( generate destroy update ).include?(ARGV[0])

%w(rubygems merb-core).each do |file|
  require file
end

# start merb
Merb.start %w( -e development -a runner )

# remove dependency
module Kernel
  undef dependency if defined?(Kernel.dependency)
end

%w(rubigen rubigen/scripts/generate rubigen/scripts/destroy 
    rubigen/scripts/update fileutils find  merb-gen).each do |file|
  require file
end

if ARGV.empty?
  # List all the Available Generators
  RubiGen::Base.use_component_sources! Merb.generator_scope
  RubiGen::Scripts::Generate.new.run(ARGV)

# merb-gen plugin foo
elsif ARGV[0] && ARGV[0] == "plugin"
  Merb::ApplicationGenerator.run ARGV[1], ARGV[2..-1], "merb_plugin", command || "generate"

# merb-gen controller foo
# merb-gen resource foo --test
elsif ARGV[1] && ARGV[1] !~ /^-/
  Merb::ComponentGenerator.run ARGV[1], ARGV[1..-1], ARGV.first, command || "generate"

else
  begin
    # May be a generator that takes no arguments.
    RubiGen::Base.use_component_sources! Merb.generator_scope
    RubiGen::Base.lookup(ARGV[0])
    Merb::ComponentGenerator.run ARGV[0], ARGV[1..-1], ARGV.first, command || "generate"
  rescue => e
    puts e.message
    # merb-gen foo
    # merb-gen foo --test
    Merb::ApplicationGenerator.run ARGV.first, ARGV[1..-1], "merb", command || "generate"
  end  
end